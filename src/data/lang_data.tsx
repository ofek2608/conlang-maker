

export type LangData = {
  displayName: string;
  nativeName: string;
  alphabet: LangAlphabet;
  dictionary: LangDictionary;
  keyboard: LangKeyboard;
};

//////////////
// Alphabet //
//////////////

export type SvgRepr = {
  viewBox: string; // "corner-up-left-x corner-up-left-y size-x size-y"
  elements: Array<string>; // All elements of the SVG
}

export type LangLetter = {
  uncode_letter: string; // The closest unicode character to the letter (for search and copy-paste)
  svg: SvgRepr;
};

export type LangAlphabet = {
  letters: Array<LangLetter>;
};

////////////////
// Dictionary //
////////////////

export type LangDictionary = {
  baseWords: Array<LangBaseWord>;
  manipulations: Map<string,LangWordManip>;
};

export type LangWord = LangBaseWord | LangEmergentWord;

export type LangBaseWord = {
  word: string;
  definition: string;
  tags: LangTags;
};

export type LangEmergentWord = LangBaseWord & {
  parent: LangWord;
  manipulationRule: string;
};

export type LangWordManip = {
  requiredTags: LangTags;
  blacklistedTags: LangTags;
  addTags: LangTags;
  removeTags: LangTags;
  manipulateWord: LangStrManip;
  manipulateDefinition: LangStrManip;
};

export type LangStrManip = {
  //TODO use custom regular expression and replacement, so this process will be reversible.
  pattern: RegExp;
  replacement: string;
};

type LangTags = Array<string>;

//////////////
// Keyboard //
//////////////

type LangKeyboard = {
  keys: Map<number, LangKey>; // The number should be the key code (place in the layout)
  layout: Array<KeyboardPosition>; // The places of the keys in the layout (row, column) starting from the top left corner (id is the key code)
};

type KeyboardPosition = {
  row: number;
  column: number;
};

type LangKey = {
  key: LangLetter;
  // The modifier is the key that should be pressed with this key to get a different key
  // This is a map of modifiers to allow for multiple modifiers to be pressed at the same time
  modifiers: Map<Array<LangModifier>, LangLetter>;
};

type LangModifier = {
  key: LangLetter;
};


// TODO: Verify code below is correct (it was generated by ChatGPT)

type KeyboardProps = {
  langKeyboard: LangKeyboard;
};

const Keyboard: React.FC<KeyboardProps> = ({ langKeyboard }) => {
  const { keys, layout } = langKeyboard;

  const maxRow = Math.max(...layout.map((pos) => pos.row));
  const maxColumn = Math.max(...layout.map((pos) => pos.column));

  return (
    <div
      style={{
        display: "grid",
        gridTemplateColumns: `repeat(${maxColumn + 1}, 1fr)`,
        gap: "5px",
      }}
    >
      {layout.map((position, index) => {
        const keyCode = [...keys.keys()][index]; // Map index to key code
        const keyData = keys.get(keyCode);

        if (!keyData) return null;

        return (
          <div
            key={keyCode}
            style={{
              gridRow: position.row + 1,
              gridColumn: position.column + 1,
              border: "1px solid #ccc",
              borderRadius: "4px",
              padding: "10px",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              background: "#f9f9f9",
              position: "relative",
            }}
          >
            <span>{keyData.key}</span>
            {keyData.modifiers.size > 0 && (
              <div style={{ position: "absolute", top: "5px", right: "5px" }}>
                <small>Modifiers</small>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};

export default Keyboard;

// TODO: Verify code above is correct (it was generated by ChatGPT)
